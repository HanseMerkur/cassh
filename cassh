#!/usr/bin/env python
#-*- coding: utf-8 -*-
""" CASSH CLI """

# Standard library imports
from __future__ import print_function
from argparse import ArgumentParser
from codecs import getwriter
from datetime import datetime
from getpass import getpass
from json import dumps, loads
from os import chmod, getenv
from os.path import isfile
from shutil import copyfile
import sys

# Third party library imports
from configparser import ConfigParser, NoOptionError, NoSectionError
from requests import Session
from requests.exceptions import ConnectionError
from urllib3 import disable_warnings

# Disable HTTPs warnings
disable_warnings()

# Change codec
sys.stdout = getwriter('utf8')(sys.stdout)
sys.stderr = getwriter('utf8')(sys.stderr)

# Debug
# from pdb import set_trace as st

def read_conf(conf_path):
    """
    Read CASSH configuration file and return metadata.
    """
    config = ConfigParser()
    config.read(conf_path)
    user_metadata = {}
    try:
        user_metadata['name'] = config.get('user', 'name')
        user_metadata['key_path'] = config.get('user', 'key_path')\
        .replace('~', getenv('HOME'))
        user_metadata['key_signed_path'] = config.get('user', 'key_signed_path')\
        .replace('~', getenv('HOME'))
        user_metadata['url'] = config.get('user', 'url')
    except NoOptionError as error_msg:
        print('Can\'t read configuration file...')
        print(error_msg)
        exit(1)

    if user_metadata['key_path'] == user_metadata['key_signed_path']:
        print('You should put a different path for key_path and key_signed_path.')
        exit(1)

    try:
        user_metadata['auth'] = 'ldap'
        user_metadata['realname'] = config.get('ldap', 'realname')
    except NoOptionError as error_msg:
        print('Can\'t read configuration file...')
        print(error_msg)
        exit(1)
    except NoSectionError:
        user_metadata['auth'] = None
        user_metadata['realname'] = None

    if not isfile(user_metadata['key_path']):
        print('File %s doesn\'t exists' % user_metadata['key_path'])
        exit(1)

    return user_metadata

class CASSH(object):
    """
    Main CASSH class.
    """
    def __init__(self, user_metadata):
        """
        Init file.
        """
        self.name = user_metadata['name']
        self.key_path = user_metadata['key_path']
        self.key_signed_path = user_metadata['key_signed_path']
        self.session = Session()
        self.url = user_metadata['url']
        self.auth = user_metadata['auth']
        self.realname = user_metadata['realname']


    def auth_url(self, prefix=None):
        """
        Return a ?xxx=xxx to put at the end of a GET request.
        """
        passwd_message = 'Please type your LDAP password (user=%s): ' % self.realname
        if self.auth == 'ldap':
            if prefix is None:
                return '?realname=%s&password=%s'\
                    % (self.realname, getpass(passwd_message))
            else:
                return prefix + '&realname=%s&password=%s'\
                    % (self.realname, getpass(passwd_message))
        else:
            if prefix is None:
                return ''
            else:
                return prefix

    def admin(self, username, action):
        """
        Admin CLI
        """
        try:
            if action == 'revoke':
                req = self.session.get(self.url + '/admin/' + username +\
                    self.auth_url(prefix='?revoke=true'), verify=False)
            elif action == 'active':
                req = self.session.get(self.url + '/admin/' + username +\
                    self.auth_url(prefix='?revoke=false'), verify=False)
            elif action == 'delete':
                req = self.session.delete(self.url + '/admin/' + username +\
                    self.auth_url(), verify=False)
            elif action == 'status':
                req = self.session.get(self.url + '/admin/' + username +\
                    self.auth_url(prefix='?revoke=false&status=true'), verify=False)
            else:
                print('Action should be : revoke, active, delete or status')
                exit(1)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        print(req.text)

    def add(self):
        """
        Add a public key.
        """
        pubkey = open('%s.pub' % self.key_path, 'rb')
        try:
            req = self.session.put(self.url + '/client/' + self.name +\
                self.auth_url(), data=pubkey, verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        print(req.text)

    def sign(self, do_write_on_disk):
        """
        Sign a public key.
        """
        pubkey = open('%s.pub' % self.key_path, 'rb')
        try:
            req = self.session.post(self.url + '/client' + \
                self.auth_url(), data=pubkey, verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        if 'Error' in req.text:
            print(req.text)
            exit(1)
        if do_write_on_disk:
            copyfile(self.key_path, self.key_signed_path)
            chmod(self.key_signed_path, 0600)
            pubkey_signed = open('%s.pub' % self.key_signed_path, 'w+')
            pubkey_signed.write(req.text)
            pubkey_signed.close()
            print('Public key successfuly signed')
        else:
            print(req.text)

    def status(self):
        """
        Get status of public key.
        """
        try:
            req = self.session.get(self.url + '/client' + self.auth_url(),\
                verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        result = loads(req.text)
        if result == {}:
            print(dumps(result, indent=4, sort_keys=True))
            return
        is_expired = datetime.strptime(result['expiration'], '%Y-%m-%d %H:%M:%S') < datetime.now()
        if result['status'] == 'ACTIVE':
            if is_expired:
                result['status'] = 'EXPIRED'
            else:
                result['status'] = 'SIGNED'
        print(dumps(result, indent=4, sort_keys=True))

    def get_ca(self):
        """
        Get CA public key.
        """
        try:
            req = self.session.get(self.url + '/ca', verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        print(req.text)

    def get_krl(self):
        """
        Get CA KRL.
        """
        try:
            req = self.session.get(self.url + '/krl', verify=False)
        except ConnectionError:
            print('Connection error : %s' % self.url)
            exit(1)
        print(req.text)


if __name__ == '__main__':

    CONF_FILE = '%s/.cassh' % getenv('HOME')

    if not isfile(CONF_FILE):
        print('Config file missing : %s' % CONF_FILE)
        print('Example:')
        print('[user]')
        print('name = user')
        print('key_path = ~/.ssh/id_rsa')
        print('key_signed_path = ~/.ssh/id_rsa_signed')
        print('url = https://cassh.net')
        print('')
        print('# [ldap]')
        print('# realname = Ursula Ser')
        exit(1)

    PARSER = ArgumentParser()

    SUBPARSERS = PARSER.add_subparsers(help='commands')

    # ADMIN Arguments
    ADMIN_PARSER = SUBPARSERS.add_parser('admin',\
        help='Administrator command : active - revoke - delete - status keys')
    ADMIN_PARSER.add_argument('username', action='store',\
        help='Username of client\'s key')
    ADMIN_PARSER.add_argument('action', action='store',\
        help='Choice between : active - revoke - delete - status')

    # ADD Arguments
    ADD_PARSER = SUBPARSERS.add_parser('add', help='Add a key to remote ssh ca server.')

    # SIGN Arguments
    SIGN_PARSER = SUBPARSERS.add_parser('sign', help='Sign its key by remote ssh ca server.')
    SIGN_PARSER.add_argument('-w', '--write-on-disk', action='store_true',\
        help='Write the key on disk. Specified by \'key_signed_path\' in configuration file')

    # STATUS Arguments
    STATUS_PARSER = SUBPARSERS.add_parser('status',\
        help='Display key current status on remote ssh ca server.')

    # CA Arguments
    CA_PARSER = SUBPARSERS.add_parser('ca',\
        help='Display CA public key.')

    # KRL Arguments
    KRL_PARSER = SUBPARSERS.add_parser('krl',\
        help='Display CA KRL.')

    ARGS = PARSER.parse_args()

    LBC = CASSH(read_conf(CONF_FILE))

    if len(sys.argv) == 1:
        PARSER.print_help()
        exit(1)

    if sys.argv[1] == 'add':
        LBC.add()
    elif sys.argv[1] == 'sign':
        LBC.sign(ARGS.write_on_disk)
    elif sys.argv[1] == 'status':
        LBC.status()
    elif sys.argv[1] == 'ca':
        LBC.get_ca()
    elif sys.argv[1] == 'krl':
        LBC.get_krl()
    elif sys.argv[1] == 'admin':
        LBC.admin(ARGS.username, ARGS.action)

    exit(0)
