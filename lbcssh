#!/usr/bin/env python
#-*- coding: utf-8 -*-
""" LBCSSH CLI """

# Standard library imports
from argparse import ArgumentParser
from ConfigParser import ConfigParser, NoOptionError
from getpass import getpass
from os import getenv
from os.path import isfile
from sys import argv

# Third party library imports
from requests import Session
from urllib3 import disable_warnings

# Disable HTTPs warnings
disable_warnings()

# Debug
# from pdb import set_trace as st

def display_devices_type(devices_type):
    """
    Display results.
    """
    for device_type in devices_type['results']:
        print device_type['model']

def read_conf(conf_path):
    """
    Read LBCSSH configuration file.
    """
    config = ConfigParser()
    config.read(conf_path)
    user_metadata = {}
    try:
        user_metadata['name'] = config.get('user', 'name')
        user_metadata['realname'] = config.get('user', 'realname')
        user_metadata['pubkey_path'] = config.get('user', 'pubkey_path')
        user_metadata['url'] = config.get('user', 'url')
        user_metadata['auth'] = config.get('user', 'auth')
    except NoOptionError as error_msg:
        print "Can't read configuration file..."
        print error_msg
        exit(1)
    if not isfile(user_metadata['pubkey_path']):
        print "File %s does not exists" % user_metadata['pubkey_path']
        exit(1)

    return user_metadata

class LBCSSH(object):
    """
    Main LBCSSH class.
    """
    def __init__(self, user_metadata):
        """
        Init file.
        """
        self.name = user_metadata['name']
        self.pubkey_path = user_metadata['pubkey_path']
        self.session = Session()
        self.url = user_metadata['url']
        self.auth = user_metadata['auth']
        self.realname = user_metadata['realname']


    def auth_url(self, prefix=""):
        """
        Return a ?xxx=xxx data
        """
        if self.auth == 'ldap':
            if prefix is None:
                return '?realname=%s&password=%s' % (self.realname, getpass('pass: '))
            else:
                return prefix + '&realname=%s&password=%s' % (self.realname, getpass('pass: '))
        else:
            return prefix

    def admin(self, username, action):
        """
        Admin CLI
        """
        if action == 'revoke':
            req = self.session.get(self.url + 'admin/' + username + \
                self.auth_url(prefix='?revoke=true'), verify=False)
        elif action == 'active':
            req = self.session.get(self.url + 'admin/' + username + \
                self.auth_url(prefix='?revoke=false'), verify=False)
        elif action == 'delete':
            req = self.session.delete(self.url + 'admin/' + username + \
                self.auth_url(), verify=False)
        else:
            print 'Action should be : revoke, active or delete'
            exit(1)
        print req.text

    def add(self):
        """
        Add a key.
        """
        pubkey = open(self.pubkey_path, 'rb')
        req = self.session.put(self.url + 'client/' + self.name + self.auth_url(), \
            data=pubkey, verify=False)
        print req.text

    def sign(self):
        """
        Sign a key.
        """
        pubkey = open(self.pubkey_path, 'rb')
        req = self.session.post(self.url + 'client/' + self.name + self.auth_url(), \
            data=pubkey, verify=False)
        print req.text

    def status(self):
        """
        Get status of key.
        """
        req = self.session.get(self.url + 'client/' + self.name + self.auth_url(), verify=False)
        print req.text

    def get_ca(self):
        """
        Delete a key.
        """
        req = self.session.get(self.url + 'ca', verify=False)
        print req.text

    def get_krl(self):
        """
        Delete a key.
        """
        req = self.session.get(self.url + 'krl', verify=False)
        print req.text


if __name__ == '__main__':

    CONF_FILE = '%s/.lbcssh' % getenv('HOME')

    if not isfile(CONF_FILE):
        print 'Config file missing : %s' % CONF_FILE
        print 'Example:'
        print '[user]'
        print 'name = user'
        print 'realname = Ursula Ser'
        print 'pubkey_path = ~/.ssh/id_rsa'
        print 'url = https://lbcssh.net'
        print 'auth = None # None or ldap'
        exit(1)

    PARSER = ArgumentParser()

    SUBPARSERS = PARSER.add_subparsers(help='commands')

    # ADMIN Arguments
    ADMIN_PARSER = SUBPARSERS.add_parser('admin', help='TODO')
    ADMIN_PARSER.add_argument('username', action='store', help='TODO')
    ADMIN_PARSER.add_argument('action', action='store', help='TODO')

    # ADD Arguments
    ADD_PARSER = SUBPARSERS.add_parser('add', help='TODO')

    # SIGN Arguments
    SIGN_PARSER = SUBPARSERS.add_parser('sign', help='TODO')

    # STATUS Arguments
    STATUS_PARSER = SUBPARSERS.add_parser('status', help='TODO')

    # CA Arguments
    CA_PARSER = SUBPARSERS.add_parser('ca', help='TODO')

    # KRL Arguments
    KRL_PARSER = SUBPARSERS.add_parser('krl', help='TODO')

    ARGS = PARSER.parse_args()

    LBC = LBCSSH(read_conf(CONF_FILE))

    if argv[1] == 'add':
        LBC.add()
    elif argv[1] == 'sign':
        LBC.sign()
    elif argv[1] == 'status':
        LBC.status()
    elif argv[1] == 'ca':
        LBC.get_ca()
    elif argv[1] == 'krl':
        LBC.get_krl()
    elif argv[1] == 'admin':
        LBC.admin(ARGS.username, ARGS.action)

    exit(0)
